-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity houghlines_accel_Axi2Mat is
port (
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    imgInput_44_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgInput_44_full_n : IN STD_LOGIC;
    imgInput_44_write : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (5 downto 0);
    cols : IN STD_LOGIC_VECTOR (9 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read_ap_vld : IN STD_LOGIC;
    rows_ap_vld : IN STD_LOGIC;
    cols_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of houghlines_accel_Axi2Mat is 
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal Axi2Mat_entry3_U0_ap_start : STD_LOGIC;
    signal Axi2Mat_entry3_U0_ap_done : STD_LOGIC;
    signal Axi2Mat_entry3_U0_ap_continue : STD_LOGIC;
    signal Axi2Mat_entry3_U0_ap_idle : STD_LOGIC;
    signal Axi2Mat_entry3_U0_ap_ready : STD_LOGIC;
    signal Axi2Mat_entry3_U0_start_out : STD_LOGIC;
    signal Axi2Mat_entry3_U0_start_write : STD_LOGIC;
    signal Axi2Mat_entry3_U0_p_read_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Axi2Mat_entry3_U0_p_read_out_write : STD_LOGIC;
    signal Axi2Mat_entry3_U0_rows_out_din : STD_LOGIC_VECTOR (5 downto 0);
    signal Axi2Mat_entry3_U0_rows_out_write : STD_LOGIC;
    signal Axi2Mat_entry3_U0_cols_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Axi2Mat_entry3_U0_cols_out_write : STD_LOGIC;
    signal Axi2Mat_entry21_U0_ap_start : STD_LOGIC;
    signal Axi2Mat_entry21_U0_ap_done : STD_LOGIC;
    signal Axi2Mat_entry21_U0_ap_continue : STD_LOGIC;
    signal Axi2Mat_entry21_U0_ap_idle : STD_LOGIC;
    signal Axi2Mat_entry21_U0_ap_ready : STD_LOGIC;
    signal Axi2Mat_entry21_U0_start_out : STD_LOGIC;
    signal Axi2Mat_entry21_U0_start_write : STD_LOGIC;
    signal Axi2Mat_entry21_U0_p_read_read : STD_LOGIC;
    signal Axi2Mat_entry21_U0_rows_read : STD_LOGIC;
    signal Axi2Mat_entry21_U0_cols_read : STD_LOGIC;
    signal Axi2Mat_entry21_U0_img_in_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Axi2Mat_entry21_U0_img_in_out_write : STD_LOGIC;
    signal Axi2Mat_entry21_U0_rows_out_din : STD_LOGIC_VECTOR (5 downto 0);
    signal Axi2Mat_entry21_U0_rows_out_write : STD_LOGIC;
    signal Axi2Mat_entry21_U0_cols_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal Axi2Mat_entry21_U0_cols_out_write : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_start : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_done : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_continue : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_idle : STD_LOGIC;
    signal last_blk_pxl_width_U0_ap_ready : STD_LOGIC;
    signal last_blk_pxl_width_U0_start_out : STD_LOGIC;
    signal last_blk_pxl_width_U0_start_write : STD_LOGIC;
    signal last_blk_pxl_width_U0_ret_out_din : STD_LOGIC_VECTOR (3 downto 0);
    signal last_blk_pxl_width_U0_ret_out_write : STD_LOGIC;
    signal addrbound_U0_ap_start : STD_LOGIC;
    signal addrbound_U0_ap_done : STD_LOGIC;
    signal addrbound_U0_ap_continue : STD_LOGIC;
    signal addrbound_U0_ap_idle : STD_LOGIC;
    signal addrbound_U0_ap_ready : STD_LOGIC;
    signal addrbound_U0_return_r : STD_LOGIC_VECTOR (18 downto 0);
    signal addrbound_U0_return_r_ap_vld : STD_LOGIC;
    signal addrbound_U0_rows_read : STD_LOGIC;
    signal addrbound_U0_cols_read : STD_LOGIC;
    signal addrbound_U0_rows_out_din : STD_LOGIC_VECTOR (5 downto 0);
    signal addrbound_U0_rows_out_write : STD_LOGIC;
    signal addrbound_U0_cols_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal addrbound_U0_cols_out_write : STD_LOGIC;
    signal ap_channel_done_p_channel : STD_LOGIC;
    signal p_channel_full_n : STD_LOGIC;
    signal Axi2Mat_Block_split15_proc_U0_ap_start : STD_LOGIC;
    signal Axi2Mat_Block_split15_proc_U0_ap_done : STD_LOGIC;
    signal Axi2Mat_Block_split15_proc_U0_ap_continue : STD_LOGIC;
    signal Axi2Mat_Block_split15_proc_U0_ap_idle : STD_LOGIC;
    signal Axi2Mat_Block_split15_proc_U0_ap_ready : STD_LOGIC;
    signal Axi2Mat_Block_split15_proc_U0_ap_return : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_channel_done_axibound_V : STD_LOGIC;
    signal axibound_V_full_n : STD_LOGIC;
    signal Axi2AxiStream_U0_ap_start : STD_LOGIC;
    signal Axi2AxiStream_U0_ap_done : STD_LOGIC;
    signal Axi2AxiStream_U0_ap_continue : STD_LOGIC;
    signal Axi2AxiStream_U0_ap_idle : STD_LOGIC;
    signal Axi2AxiStream_U0_ap_ready : STD_LOGIC;
    signal Axi2AxiStream_U0_img_in_read : STD_LOGIC;
    signal Axi2AxiStream_U0_ldata1_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Axi2AxiStream_U0_ldata1_write : STD_LOGIC;
    signal AxiStream2MatStream_U0_ap_start : STD_LOGIC;
    signal AxiStream2MatStream_U0_ap_done : STD_LOGIC;
    signal AxiStream2MatStream_U0_ap_continue : STD_LOGIC;
    signal AxiStream2MatStream_U0_ap_idle : STD_LOGIC;
    signal AxiStream2MatStream_U0_ap_ready : STD_LOGIC;
    signal AxiStream2MatStream_U0_ldata1_read : STD_LOGIC;
    signal AxiStream2MatStream_U0_imgInput_44_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AxiStream2MatStream_U0_imgInput_44_write : STD_LOGIC;
    signal AxiStream2MatStream_U0_rows_read : STD_LOGIC;
    signal AxiStream2MatStream_U0_cols_bound_per_npc_read : STD_LOGIC;
    signal AxiStream2MatStream_U0_last_blk_width_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal p_read_c_full_n : STD_LOGIC;
    signal p_read_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal p_read_c_empty_n : STD_LOGIC;
    signal rows_c1_full_n : STD_LOGIC;
    signal rows_c1_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal rows_c1_empty_n : STD_LOGIC;
    signal cols_c2_full_n : STD_LOGIC;
    signal cols_c2_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal cols_c2_empty_n : STD_LOGIC;
    signal img_in_c_full_n : STD_LOGIC;
    signal img_in_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_in_c_empty_n : STD_LOGIC;
    signal rows_c_full_n : STD_LOGIC;
    signal rows_c_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal rows_c_empty_n : STD_LOGIC;
    signal cols_c_full_n : STD_LOGIC;
    signal cols_c_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal cols_c_empty_n : STD_LOGIC;
    signal last_blk_width_c_full_n : STD_LOGIC;
    signal last_blk_width_c_dout : STD_LOGIC_VECTOR (3 downto 0);
    signal last_blk_width_c_empty_n : STD_LOGIC;
    signal p_channel_dout : STD_LOGIC_VECTOR (18 downto 0);
    signal p_channel_empty_n : STD_LOGIC;
    signal rows_c13_full_n : STD_LOGIC;
    signal rows_c13_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal rows_c13_empty_n : STD_LOGIC;
    signal cols_c14_full_n : STD_LOGIC;
    signal cols_c14_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal cols_c14_empty_n : STD_LOGIC;
    signal axibound_V_dout : STD_LOGIC_VECTOR (18 downto 0);
    signal axibound_V_empty_n : STD_LOGIC;
    signal ldata_full_n : STD_LOGIC;
    signal ldata_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ldata_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Axi2Mat_entry3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Axi2Mat_entry3_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_last_blk_pxl_width_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_last_blk_pxl_width_U0_ap_ready : STD_LOGIC;
    signal start_for_Axi2Mat_entry21_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Axi2Mat_entry21_U0_full_n : STD_LOGIC;
    signal start_for_Axi2Mat_entry21_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Axi2Mat_entry21_U0_empty_n : STD_LOGIC;
    signal start_for_addrbound_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_addrbound_U0_full_n : STD_LOGIC;
    signal start_for_addrbound_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_addrbound_U0_empty_n : STD_LOGIC;
    signal start_for_AxiStream2MatStream_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AxiStream2MatStream_U0_full_n : STD_LOGIC;
    signal start_for_AxiStream2MatStream_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AxiStream2MatStream_U0_empty_n : STD_LOGIC;
    signal addrbound_U0_start_full_n : STD_LOGIC;
    signal addrbound_U0_start_write : STD_LOGIC;
    signal Axi2Mat_Block_split15_proc_U0_start_full_n : STD_LOGIC;
    signal Axi2Mat_Block_split15_proc_U0_start_write : STD_LOGIC;
    signal Axi2AxiStream_U0_start_full_n : STD_LOGIC;
    signal Axi2AxiStream_U0_start_write : STD_LOGIC;
    signal AxiStream2MatStream_U0_start_full_n : STD_LOGIC;
    signal AxiStream2MatStream_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component houghlines_accel_Axi2Mat_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        rows : IN STD_LOGIC_VECTOR (5 downto 0);
        cols : IN STD_LOGIC_VECTOR (9 downto 0);
        p_read_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_read_out_full_n : IN STD_LOGIC;
        p_read_out_write : OUT STD_LOGIC;
        rows_out_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        rows_out_full_n : IN STD_LOGIC;
        rows_out_write : OUT STD_LOGIC;
        cols_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        cols_out_full_n : IN STD_LOGIC;
        cols_out_write : OUT STD_LOGIC );
    end component;


    component houghlines_accel_Axi2Mat_entry21 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_read_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read_empty_n : IN STD_LOGIC;
        p_read_read : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        img_in_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_in_out_full_n : IN STD_LOGIC;
        img_in_out_write : OUT STD_LOGIC;
        rows_out_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        rows_out_full_n : IN STD_LOGIC;
        rows_out_write : OUT STD_LOGIC;
        cols_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        cols_out_full_n : IN STD_LOGIC;
        cols_out_write : OUT STD_LOGIC );
    end component;


    component houghlines_accel_last_blk_pxl_width IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ret_out_din : OUT STD_LOGIC_VECTOR (3 downto 0);
        ret_out_full_n : IN STD_LOGIC;
        ret_out_write : OUT STD_LOGIC );
    end component;


    component houghlines_accel_addrbound IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        return_r : OUT STD_LOGIC_VECTOR (18 downto 0);
        return_r_ap_vld : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        cols_empty_n : IN STD_LOGIC;
        cols_read : OUT STD_LOGIC;
        rows_out_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        rows_out_full_n : IN STD_LOGIC;
        rows_out_write : OUT STD_LOGIC;
        cols_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        cols_out_full_n : IN STD_LOGIC;
        cols_out_write : OUT STD_LOGIC );
    end component;


    component houghlines_accel_Axi2Mat_Block_split15_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        axibound_V_1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component houghlines_accel_Axi2AxiStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_in_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_empty_n : IN STD_LOGIC;
        img_in_read : OUT STD_LOGIC;
        ldata1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ldata1_full_n : IN STD_LOGIC;
        ldata1_write : OUT STD_LOGIC;
        addrbound_V_read : IN STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component houghlines_accel_AxiStream2MatStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ldata1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ldata1_empty_n : IN STD_LOGIC;
        ldata1_read : OUT STD_LOGIC;
        imgInput_44_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgInput_44_full_n : IN STD_LOGIC;
        imgInput_44_write : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        cols_bound_per_npc_empty_n : IN STD_LOGIC;
        cols_bound_per_npc_read : OUT STD_LOGIC;
        last_blk_width_dout : IN STD_LOGIC_VECTOR (3 downto 0);
        last_blk_width_empty_n : IN STD_LOGIC;
        last_blk_width_read : OUT STD_LOGIC );
    end component;


    component houghlines_accel_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component houghlines_accel_fifo_w6_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component houghlines_accel_fifo_w10_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component houghlines_accel_fifo_w8_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component houghlines_accel_fifo_w4_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (3 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component houghlines_accel_fifo_w19_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (18 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (18 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component houghlines_accel_fifo_w6_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component houghlines_accel_fifo_w10_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component houghlines_accel_start_for_Axi2Mat_entry21_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component houghlines_accel_start_for_addrbound_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component houghlines_accel_start_for_AxiStream2MatStream_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Axi2Mat_entry3_U0 : component houghlines_accel_Axi2Mat_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Axi2Mat_entry3_U0_ap_start,
        start_full_n => start_for_Axi2Mat_entry21_U0_full_n,
        ap_done => Axi2Mat_entry3_U0_ap_done,
        ap_continue => Axi2Mat_entry3_U0_ap_continue,
        ap_idle => Axi2Mat_entry3_U0_ap_idle,
        ap_ready => Axi2Mat_entry3_U0_ap_ready,
        start_out => Axi2Mat_entry3_U0_start_out,
        start_write => Axi2Mat_entry3_U0_start_write,
        p_read => p_read,
        rows => rows,
        cols => cols,
        p_read_out_din => Axi2Mat_entry3_U0_p_read_out_din,
        p_read_out_full_n => p_read_c_full_n,
        p_read_out_write => Axi2Mat_entry3_U0_p_read_out_write,
        rows_out_din => Axi2Mat_entry3_U0_rows_out_din,
        rows_out_full_n => rows_c1_full_n,
        rows_out_write => Axi2Mat_entry3_U0_rows_out_write,
        cols_out_din => Axi2Mat_entry3_U0_cols_out_din,
        cols_out_full_n => cols_c2_full_n,
        cols_out_write => Axi2Mat_entry3_U0_cols_out_write);

    Axi2Mat_entry21_U0 : component houghlines_accel_Axi2Mat_entry21
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Axi2Mat_entry21_U0_ap_start,
        start_full_n => start_for_addrbound_U0_full_n,
        ap_done => Axi2Mat_entry21_U0_ap_done,
        ap_continue => Axi2Mat_entry21_U0_ap_continue,
        ap_idle => Axi2Mat_entry21_U0_ap_idle,
        ap_ready => Axi2Mat_entry21_U0_ap_ready,
        start_out => Axi2Mat_entry21_U0_start_out,
        start_write => Axi2Mat_entry21_U0_start_write,
        p_read_dout => p_read_c_dout,
        p_read_empty_n => p_read_c_empty_n,
        p_read_read => Axi2Mat_entry21_U0_p_read_read,
        rows_dout => rows_c1_dout,
        rows_empty_n => rows_c1_empty_n,
        rows_read => Axi2Mat_entry21_U0_rows_read,
        cols_dout => cols_c2_dout,
        cols_empty_n => cols_c2_empty_n,
        cols_read => Axi2Mat_entry21_U0_cols_read,
        img_in_out_din => Axi2Mat_entry21_U0_img_in_out_din,
        img_in_out_full_n => img_in_c_full_n,
        img_in_out_write => Axi2Mat_entry21_U0_img_in_out_write,
        rows_out_din => Axi2Mat_entry21_U0_rows_out_din,
        rows_out_full_n => rows_c_full_n,
        rows_out_write => Axi2Mat_entry21_U0_rows_out_write,
        cols_out_din => Axi2Mat_entry21_U0_cols_out_din,
        cols_out_full_n => cols_c_full_n,
        cols_out_write => Axi2Mat_entry21_U0_cols_out_write);

    last_blk_pxl_width_U0 : component houghlines_accel_last_blk_pxl_width
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => last_blk_pxl_width_U0_ap_start,
        start_full_n => start_for_AxiStream2MatStream_U0_full_n,
        ap_done => last_blk_pxl_width_U0_ap_done,
        ap_continue => last_blk_pxl_width_U0_ap_continue,
        ap_idle => last_blk_pxl_width_U0_ap_idle,
        ap_ready => last_blk_pxl_width_U0_ap_ready,
        start_out => last_blk_pxl_width_U0_start_out,
        start_write => last_blk_pxl_width_U0_start_write,
        ret_out_din => last_blk_pxl_width_U0_ret_out_din,
        ret_out_full_n => last_blk_width_c_full_n,
        ret_out_write => last_blk_pxl_width_U0_ret_out_write);

    addrbound_U0 : component houghlines_accel_addrbound
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => addrbound_U0_ap_start,
        ap_done => addrbound_U0_ap_done,
        ap_continue => addrbound_U0_ap_continue,
        ap_idle => addrbound_U0_ap_idle,
        ap_ready => addrbound_U0_ap_ready,
        return_r => addrbound_U0_return_r,
        return_r_ap_vld => addrbound_U0_return_r_ap_vld,
        rows_dout => rows_c_dout,
        rows_empty_n => rows_c_empty_n,
        rows_read => addrbound_U0_rows_read,
        cols_dout => cols_c_dout,
        cols_empty_n => cols_c_empty_n,
        cols_read => addrbound_U0_cols_read,
        rows_out_din => addrbound_U0_rows_out_din,
        rows_out_full_n => rows_c13_full_n,
        rows_out_write => addrbound_U0_rows_out_write,
        cols_out_din => addrbound_U0_cols_out_din,
        cols_out_full_n => cols_c14_full_n,
        cols_out_write => addrbound_U0_cols_out_write);

    Axi2Mat_Block_split15_proc_U0 : component houghlines_accel_Axi2Mat_Block_split15_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Axi2Mat_Block_split15_proc_U0_ap_start,
        ap_done => Axi2Mat_Block_split15_proc_U0_ap_done,
        ap_continue => Axi2Mat_Block_split15_proc_U0_ap_continue,
        ap_idle => Axi2Mat_Block_split15_proc_U0_ap_idle,
        ap_ready => Axi2Mat_Block_split15_proc_U0_ap_ready,
        axibound_V_1 => p_channel_dout,
        ap_return => Axi2Mat_Block_split15_proc_U0_ap_return);

    Axi2AxiStream_U0 : component houghlines_accel_Axi2AxiStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Axi2AxiStream_U0_ap_start,
        ap_done => Axi2AxiStream_U0_ap_done,
        ap_continue => Axi2AxiStream_U0_ap_continue,
        ap_idle => Axi2AxiStream_U0_ap_idle,
        ap_ready => Axi2AxiStream_U0_ap_ready,
        img_in_dout => img_in_c_dout,
        img_in_empty_n => img_in_c_empty_n,
        img_in_read => Axi2AxiStream_U0_img_in_read,
        ldata1_din => Axi2AxiStream_U0_ldata1_din,
        ldata1_full_n => ldata_full_n,
        ldata1_write => Axi2AxiStream_U0_ldata1_write,
        addrbound_V_read => axibound_V_dout);

    AxiStream2MatStream_U0 : component houghlines_accel_AxiStream2MatStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AxiStream2MatStream_U0_ap_start,
        ap_done => AxiStream2MatStream_U0_ap_done,
        ap_continue => AxiStream2MatStream_U0_ap_continue,
        ap_idle => AxiStream2MatStream_U0_ap_idle,
        ap_ready => AxiStream2MatStream_U0_ap_ready,
        ldata1_dout => ldata_dout,
        ldata1_empty_n => ldata_empty_n,
        ldata1_read => AxiStream2MatStream_U0_ldata1_read,
        imgInput_44_din => AxiStream2MatStream_U0_imgInput_44_din,
        imgInput_44_full_n => imgInput_44_full_n,
        imgInput_44_write => AxiStream2MatStream_U0_imgInput_44_write,
        rows_dout => rows_c13_dout,
        rows_empty_n => rows_c13_empty_n,
        rows_read => AxiStream2MatStream_U0_rows_read,
        cols_bound_per_npc_dout => cols_c14_dout,
        cols_bound_per_npc_empty_n => cols_c14_empty_n,
        cols_bound_per_npc_read => AxiStream2MatStream_U0_cols_bound_per_npc_read,
        last_blk_width_dout => last_blk_width_c_dout,
        last_blk_width_empty_n => last_blk_width_c_empty_n,
        last_blk_width_read => AxiStream2MatStream_U0_last_blk_width_read);

    p_read_c_U : component houghlines_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2Mat_entry3_U0_p_read_out_din,
        if_full_n => p_read_c_full_n,
        if_write => Axi2Mat_entry3_U0_p_read_out_write,
        if_dout => p_read_c_dout,
        if_empty_n => p_read_c_empty_n,
        if_read => Axi2Mat_entry21_U0_p_read_read);

    rows_c1_U : component houghlines_accel_fifo_w6_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2Mat_entry3_U0_rows_out_din,
        if_full_n => rows_c1_full_n,
        if_write => Axi2Mat_entry3_U0_rows_out_write,
        if_dout => rows_c1_dout,
        if_empty_n => rows_c1_empty_n,
        if_read => Axi2Mat_entry21_U0_rows_read);

    cols_c2_U : component houghlines_accel_fifo_w10_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2Mat_entry3_U0_cols_out_din,
        if_full_n => cols_c2_full_n,
        if_write => Axi2Mat_entry3_U0_cols_out_write,
        if_dout => cols_c2_dout,
        if_empty_n => cols_c2_empty_n,
        if_read => Axi2Mat_entry21_U0_cols_read);

    img_in_c_U : component houghlines_accel_fifo_w8_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2Mat_entry21_U0_img_in_out_din,
        if_full_n => img_in_c_full_n,
        if_write => Axi2Mat_entry21_U0_img_in_out_write,
        if_dout => img_in_c_dout,
        if_empty_n => img_in_c_empty_n,
        if_read => Axi2AxiStream_U0_img_in_read);

    rows_c_U : component houghlines_accel_fifo_w6_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2Mat_entry21_U0_rows_out_din,
        if_full_n => rows_c_full_n,
        if_write => Axi2Mat_entry21_U0_rows_out_write,
        if_dout => rows_c_dout,
        if_empty_n => rows_c_empty_n,
        if_read => addrbound_U0_rows_read);

    cols_c_U : component houghlines_accel_fifo_w10_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2Mat_entry21_U0_cols_out_din,
        if_full_n => cols_c_full_n,
        if_write => Axi2Mat_entry21_U0_cols_out_write,
        if_dout => cols_c_dout,
        if_empty_n => cols_c_empty_n,
        if_read => addrbound_U0_cols_read);

    last_blk_width_c_U : component houghlines_accel_fifo_w4_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => last_blk_pxl_width_U0_ret_out_din,
        if_full_n => last_blk_width_c_full_n,
        if_write => last_blk_pxl_width_U0_ret_out_write,
        if_dout => last_blk_width_c_dout,
        if_empty_n => last_blk_width_c_empty_n,
        if_read => AxiStream2MatStream_U0_last_blk_width_read);

    p_channel_U : component houghlines_accel_fifo_w19_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => addrbound_U0_return_r,
        if_full_n => p_channel_full_n,
        if_write => addrbound_U0_ap_done,
        if_dout => p_channel_dout,
        if_empty_n => p_channel_empty_n,
        if_read => Axi2Mat_Block_split15_proc_U0_ap_ready);

    rows_c13_U : component houghlines_accel_fifo_w6_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => addrbound_U0_rows_out_din,
        if_full_n => rows_c13_full_n,
        if_write => addrbound_U0_rows_out_write,
        if_dout => rows_c13_dout,
        if_empty_n => rows_c13_empty_n,
        if_read => AxiStream2MatStream_U0_rows_read);

    cols_c14_U : component houghlines_accel_fifo_w10_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => addrbound_U0_cols_out_din,
        if_full_n => cols_c14_full_n,
        if_write => addrbound_U0_cols_out_write,
        if_dout => cols_c14_dout,
        if_empty_n => cols_c14_empty_n,
        if_read => AxiStream2MatStream_U0_cols_bound_per_npc_read);

    axibound_V_U : component houghlines_accel_fifo_w19_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2Mat_Block_split15_proc_U0_ap_return,
        if_full_n => axibound_V_full_n,
        if_write => Axi2Mat_Block_split15_proc_U0_ap_done,
        if_dout => axibound_V_dout,
        if_empty_n => axibound_V_empty_n,
        if_read => Axi2AxiStream_U0_ap_ready);

    ldata_U : component houghlines_accel_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Axi2AxiStream_U0_ldata1_din,
        if_full_n => ldata_full_n,
        if_write => Axi2AxiStream_U0_ldata1_write,
        if_dout => ldata_dout,
        if_empty_n => ldata_empty_n,
        if_read => AxiStream2MatStream_U0_ldata1_read);

    start_for_Axi2Mat_entry21_U0_U : component houghlines_accel_start_for_Axi2Mat_entry21_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Axi2Mat_entry21_U0_din,
        if_full_n => start_for_Axi2Mat_entry21_U0_full_n,
        if_write => Axi2Mat_entry3_U0_start_write,
        if_dout => start_for_Axi2Mat_entry21_U0_dout,
        if_empty_n => start_for_Axi2Mat_entry21_U0_empty_n,
        if_read => Axi2Mat_entry21_U0_ap_ready);

    start_for_addrbound_U0_U : component houghlines_accel_start_for_addrbound_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_addrbound_U0_din,
        if_full_n => start_for_addrbound_U0_full_n,
        if_write => Axi2Mat_entry21_U0_start_write,
        if_dout => start_for_addrbound_U0_dout,
        if_empty_n => start_for_addrbound_U0_empty_n,
        if_read => addrbound_U0_ap_ready);

    start_for_AxiStream2MatStream_U0_U : component houghlines_accel_start_for_AxiStream2MatStream_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AxiStream2MatStream_U0_din,
        if_full_n => start_for_AxiStream2MatStream_U0_full_n,
        if_write => last_blk_pxl_width_U0_start_write,
        if_dout => start_for_AxiStream2MatStream_U0_dout,
        if_empty_n => start_for_AxiStream2MatStream_U0_empty_n,
        if_read => AxiStream2MatStream_U0_ap_ready);





    ap_sync_reg_Axi2Mat_entry3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Axi2Mat_entry3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Axi2Mat_entry3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Axi2Mat_entry3_U0_ap_ready <= ap_sync_Axi2Mat_entry3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_last_blk_pxl_width_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_last_blk_pxl_width_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_last_blk_pxl_width_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_last_blk_pxl_width_U0_ap_ready <= ap_sync_last_blk_pxl_width_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Axi2AxiStream_U0_ap_continue <= ap_const_logic_1;
    Axi2AxiStream_U0_ap_start <= axibound_V_empty_n;
    Axi2AxiStream_U0_start_full_n <= ap_const_logic_1;
    Axi2AxiStream_U0_start_write <= ap_const_logic_0;
    Axi2Mat_Block_split15_proc_U0_ap_continue <= axibound_V_full_n;
    Axi2Mat_Block_split15_proc_U0_ap_start <= p_channel_empty_n;
    Axi2Mat_Block_split15_proc_U0_start_full_n <= ap_const_logic_1;
    Axi2Mat_Block_split15_proc_U0_start_write <= ap_const_logic_0;
    Axi2Mat_entry21_U0_ap_continue <= ap_const_logic_1;
    Axi2Mat_entry21_U0_ap_start <= start_for_Axi2Mat_entry21_U0_empty_n;
    Axi2Mat_entry3_U0_ap_continue <= ap_const_logic_1;
    Axi2Mat_entry3_U0_ap_start <= ((ap_sync_reg_Axi2Mat_entry3_U0_ap_ready xor ap_const_logic_1) and ap_start);
    AxiStream2MatStream_U0_ap_continue <= ap_continue;
    AxiStream2MatStream_U0_ap_start <= start_for_AxiStream2MatStream_U0_empty_n;
    AxiStream2MatStream_U0_start_full_n <= ap_const_logic_1;
    AxiStream2MatStream_U0_start_write <= ap_const_logic_0;
    addrbound_U0_ap_continue <= p_channel_full_n;
    addrbound_U0_ap_start <= start_for_addrbound_U0_empty_n;
    addrbound_U0_start_full_n <= ap_const_logic_1;
    addrbound_U0_start_write <= ap_const_logic_0;
    ap_channel_done_axibound_V <= Axi2Mat_Block_split15_proc_U0_ap_done;
    ap_channel_done_p_channel <= addrbound_U0_ap_done;
    ap_done <= AxiStream2MatStream_U0_ap_done;
    ap_idle <= (last_blk_pxl_width_U0_ap_idle and (axibound_V_empty_n xor ap_const_logic_1) and (p_channel_empty_n xor ap_const_logic_1) and addrbound_U0_ap_idle and AxiStream2MatStream_U0_ap_idle and Axi2Mat_entry3_U0_ap_idle and Axi2Mat_entry21_U0_ap_idle and Axi2Mat_Block_split15_proc_U0_ap_idle and Axi2AxiStream_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Axi2Mat_entry3_U0_ap_ready <= (ap_sync_reg_Axi2Mat_entry3_U0_ap_ready or Axi2Mat_entry3_U0_ap_ready);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= AxiStream2MatStream_U0_ap_done;
    ap_sync_last_blk_pxl_width_U0_ap_ready <= (last_blk_pxl_width_U0_ap_ready or ap_sync_reg_last_blk_pxl_width_U0_ap_ready);
    ap_sync_ready <= (ap_sync_last_blk_pxl_width_U0_ap_ready and ap_sync_Axi2Mat_entry3_U0_ap_ready);
    imgInput_44_din <= AxiStream2MatStream_U0_imgInput_44_din;
    imgInput_44_write <= AxiStream2MatStream_U0_imgInput_44_write;
    last_blk_pxl_width_U0_ap_continue <= ap_const_logic_1;
    last_blk_pxl_width_U0_ap_start <= ((ap_sync_reg_last_blk_pxl_width_U0_ap_ready xor ap_const_logic_1) and ap_start);
    start_for_Axi2Mat_entry21_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_AxiStream2MatStream_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_addrbound_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
