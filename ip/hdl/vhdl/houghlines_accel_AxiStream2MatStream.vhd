-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity houghlines_accel_AxiStream2MatStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    imgInput_44_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgInput_44_full_n : IN STD_LOGIC;
    imgInput_44_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    cols_bound_per_npc_empty_n : IN STD_LOGIC;
    cols_bound_per_npc_read : OUT STD_LOGIC;
    last_blk_width_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    last_blk_width_empty_n : IN STD_LOGIC;
    last_blk_width_read : OUT STD_LOGIC );
end;


architecture behav of houghlines_accel_AxiStream2MatStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1073_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_838 : STD_LOGIC_VECTOR (0 downto 0);
    signal imgInput_44_blk_n : STD_LOGIC;
    signal icmp_ln1104_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_blk_n : STD_LOGIC;
    signal cols_bound_per_npc_blk_n : STD_LOGIC;
    signal last_blk_width_blk_n : STD_LOGIC;
    signal j_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_146 : STD_LOGIC_VECTOR (18 downto 0);
    signal cols_bound_per_npc_read_reg_776 : STD_LOGIC_VECTOR (9 downto 0);
    signal last_blk_width_read_reg_782 : STD_LOGIC_VECTOR (3 downto 0);
    signal cols_bound_per_npc_cast3_i_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_bound_per_npc_cast3_i_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_cast_i_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_cast_i_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub4_i_fu_217_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub4_i_reg_809 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1093_fu_223_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1093_reg_814 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_755_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1073_reg_819 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_1_fu_229_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op118_read_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1073_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_1_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_1_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_1_fu_304_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln674_1_reg_849 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln674_2_fu_308_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln674_2_reg_857 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1085_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1085_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1086_fu_329_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1086_reg_868 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln674_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_reg_873 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_fu_349_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln674_reg_880 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln674_1_fu_377_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln674_1_reg_887 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln414_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_fu_389_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_reg_900 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_1_fu_393_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_1_reg_908 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1104_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_phi_mux_localbuffer_V_5_phi_fu_160_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_fu_714_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_localbuffer_V_5_reg_157 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_fu_499_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_1_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_Val2_s_fu_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal rows_load_cast_cast_cast_cast_fu_180_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal cols_bound_per_npc_cast2_i_fu_204_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_i_fu_207_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal last_blk_width_cast3_i_fu_201_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal xf_bits_per_clock_fu_249_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ptr_width_minus_fu_264_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1079_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1093_fu_281_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1093_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1093_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_333_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln1079_1_fu_260_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1090_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1090_1_fu_367_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1090_fu_363_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_3_fu_371_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1090_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1080_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1105_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_4_fu_440_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_6_fu_449_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_430_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_5_fu_444_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln674_3_fu_453_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln674_5_fu_467_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_7_fu_473_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln674_4_fu_460_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_3_fu_479_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_4_fu_483_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_3_fu_487_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_4_fu_493_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln674_fu_516_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_506_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln674_fu_521_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln674_2_fu_535_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_2_fu_541_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln674_1_fu_528_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_fu_547_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_1_fu_551_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_fu_555_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_1_fu_561_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln414_fu_573_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln414_fu_578_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_567_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln414_fu_582_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_588_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_2_fu_601_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_2_fu_604_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln414_1_fu_616_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_fu_621_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_2_fu_631_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_1_fu_626_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln414_2_fu_637_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_2_fu_610_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_1_fu_643_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln414_fu_655_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_661_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_2_fu_647_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_3_fu_651_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln414_1_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln414_1_fu_684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_fu_690_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal localbuffer_V_fu_594_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln414_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln414_3_fu_671_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_1_fu_702_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_2_fu_708_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_8_fu_726_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln674_5_fu_731_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_5_fu_735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1078_fu_741_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_755_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_755_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_755_ce : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_755_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_755_p10 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component houghlines_accel_mul_mul_10ns_9ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;



begin
    mul_mul_10ns_9ns_19_4_1_U23 : component houghlines_accel_mul_mul_10ns_9ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 9,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_755_p0,
        din1 => grp_fu_755_p1,
        ce => grp_fu_755_ce,
        dout => grp_fu_755_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1073_fu_235_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_reg_146 <= i_1_fu_229_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_146 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    j_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1073_fu_235_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_reg_135 <= j_1_fu_419_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_135 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_fu_100 <= ap_const_lv8_0;
            elsif (((icmp_ln1084_reg_838 = ap_const_lv1_1) and (icmp_ln1073_reg_829 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_Val2_s_fu_100 <= ldata1_dout;
            end if; 
        end if;
    end process;

    rem_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rem_fu_96 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1084_fu_275_p2 = ap_const_lv1_1) and (icmp_ln1073_fu_235_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                rem_fu_96 <= rem_1_fu_397_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1084_fu_275_p2 = ap_const_lv1_0) and (icmp_ln1073_fu_235_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                rem_fu_96 <= rem_2_fu_312_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln1093_reg_814 <= add_ln1093_fu_223_p2;
                    cols_bound_per_npc_cast3_i_reg_799(9 downto 0) <= cols_bound_per_npc_cast3_i_fu_198_p1(9 downto 0);
                mul_ln1073_reg_819 <= grp_fu_755_p2;
                sub4_i_reg_809 <= sub4_i_fu_217_p2;
                sub_cast_i_reg_804 <= sub_cast_i_fu_213_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1084_fu_275_p2 = ap_const_lv1_1) and (icmp_ln1073_fu_235_p2 = ap_const_lv1_0))) then
                add_ln674_1_reg_887 <= add_ln674_1_fu_377_p2;
                icmp_ln1085_reg_863 <= icmp_ln1085_fu_323_p2;
                icmp_ln414_reg_892 <= icmp_ln414_fu_383_p2;
                icmp_ln674_reg_873 <= icmp_ln674_fu_343_p2;
                trunc_ln1086_reg_868 <= trunc_ln1086_fu_329_p1;
                trunc_ln414_1_reg_908 <= trunc_ln414_1_fu_393_p1;
                trunc_ln414_reg_900 <= trunc_ln414_fu_389_p1;
                trunc_ln674_reg_880 <= trunc_ln674_fu_349_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1073_fu_235_p2 = ap_const_lv1_0))) then
                bLast_reg_833 <= bLast_fu_244_p2;
                icmp_ln1084_reg_838 <= icmp_ln1084_fu_275_p2;
                icmp_ln1104_reg_914 <= icmp_ln1104_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                cols_bound_per_npc_read_reg_776 <= cols_bound_per_npc_dout;
                last_blk_width_read_reg_782 <= last_blk_width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1073_reg_829 <= icmp_ln1073_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1084_fu_275_p2 = ap_const_lv1_0) and (icmp_ln1073_fu_235_p2 = ap_const_lv1_0))) then
                icmp_ln674_1_reg_842 <= icmp_ln674_1_fu_298_p2;
                trunc_ln674_1_reg_849 <= trunc_ln674_1_fu_304_p1;
                trunc_ln674_2_reg_857 <= trunc_ln674_2_fu_308_p1;
            end if;
        end if;
    end process;
    cols_bound_per_npc_cast3_i_reg_799(31 downto 10) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, ap_enable_reg_pp0_iter0, icmp_ln1073_fu_235_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1073_fu_235_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln1073_fu_235_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1090_fu_353_p2 <= std_logic_vector(unsigned(zext_ln1079_1_fu_260_p1) + unsigned(ap_const_lv5_1F));
    add_ln1093_fu_223_p2 <= std_logic_vector(unsigned(last_blk_width_cast3_i_fu_201_p1) + unsigned(ap_const_lv5_7));
    add_ln1105_fu_413_p2 <= std_logic_vector(unsigned(j_reg_135) + unsigned(ap_const_lv32_1));
    add_ln674_1_fu_377_p2 <= std_logic_vector(unsigned(sub_ln674_3_fu_371_p2) + unsigned(ap_const_lv4_7));
    add_ln674_fu_516_p2 <= std_logic_vector(unsigned(trunc_ln674_reg_880) + unsigned(ap_const_lv4_9));
    and_ln414_1_fu_702_p2 <= (xor_ln414_fu_696_p2 and localbuffer_V_fu_594_p3);
    and_ln414_2_fu_708_p2 <= (select_ln414_3_fu_671_p3 and and_ln414_fu_690_p2);
    and_ln414_fu_690_p2 <= (shl_ln414_1_fu_678_p2 and lshr_ln414_1_fu_684_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ldata1_empty_n, imgInput_44_full_n, ap_enable_reg_pp0_iter1, icmp_ln1104_reg_914, ap_predicate_op118_read_state6)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln1104_reg_914 = ap_const_lv1_1) and (imgInput_44_full_n = ap_const_logic_0)) or ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op118_read_state6 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ldata1_empty_n, imgInput_44_full_n, ap_enable_reg_pp0_iter1, icmp_ln1104_reg_914, ap_predicate_op118_read_state6)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln1104_reg_914 = ap_const_lv1_1) and (imgInput_44_full_n = ap_const_logic_0)) or ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op118_read_state6 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ldata1_empty_n, imgInput_44_full_n, ap_enable_reg_pp0_iter1, icmp_ln1104_reg_914, ap_predicate_op118_read_state6)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln1104_reg_914 = ap_const_lv1_1) and (imgInput_44_full_n = ap_const_logic_0)) or ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op118_read_state6 = ap_const_boolean_1))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
                ap_block_state1 <= ((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(ldata1_empty_n, imgInput_44_full_n, icmp_ln1104_reg_914, ap_predicate_op118_read_state6)
    begin
                ap_block_state6_pp0_stage0_iter1 <= (((icmp_ln1104_reg_914 = ap_const_lv1_1) and (imgInput_44_full_n = ap_const_logic_0)) or ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op118_read_state6 = ap_const_boolean_1)));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln1073_fu_235_p2)
    begin
        if ((icmp_ln1073_fu_235_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_localbuffer_V_5_phi_fu_160_p4_assign_proc : process(icmp_ln1073_reg_829, icmp_ln1084_reg_838, p_Result_3_fu_714_p2, ap_phi_reg_pp0_iter1_localbuffer_V_5_reg_157, p_Result_4_fu_499_p2)
    begin
        if ((icmp_ln1073_reg_829 = ap_const_lv1_0)) then
            if ((icmp_ln1084_reg_838 = ap_const_lv1_0)) then 
                ap_phi_mux_localbuffer_V_5_phi_fu_160_p4 <= p_Result_4_fu_499_p2;
            elsif ((icmp_ln1084_reg_838 = ap_const_lv1_1)) then 
                ap_phi_mux_localbuffer_V_5_phi_fu_160_p4 <= p_Result_3_fu_714_p2;
            else 
                ap_phi_mux_localbuffer_V_5_phi_fu_160_p4 <= ap_phi_reg_pp0_iter1_localbuffer_V_5_reg_157;
            end if;
        else 
            ap_phi_mux_localbuffer_V_5_phi_fu_160_p4 <= ap_phi_reg_pp0_iter1_localbuffer_V_5_reg_157;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_localbuffer_V_5_reg_157 <= "XXXXXXXX";

    ap_predicate_op118_read_state6_assign_proc : process(icmp_ln1073_reg_829, icmp_ln1084_reg_838)
    begin
                ap_predicate_op118_read_state6 <= ((icmp_ln1084_reg_838 = ap_const_lv1_1) and (icmp_ln1073_reg_829 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bLast_fu_244_p2 <= "1" when (j_reg_135 = sub_cast_i_reg_804) else "0";

    cols_bound_per_npc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_bound_per_npc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_blk_n <= cols_bound_per_npc_empty_n;
        else 
            cols_bound_per_npc_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cols_bound_per_npc_cast2_i_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_bound_per_npc_read_reg_776),11));
    cols_bound_per_npc_cast3_i_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_bound_per_npc_read_reg_776),32));

    cols_bound_per_npc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_read <= ap_const_logic_1;
        else 
            cols_bound_per_npc_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_166_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) - unsigned(rem_fu_96));
    grp_fu_171_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln674_reg_880));

    grp_fu_755_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) or ((ap_const_logic_1 = ap_CS_fsm_state1) and ((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))))) then 
            grp_fu_755_ce <= ap_const_logic_0;
        else 
            grp_fu_755_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_755_p0 <= grp_fu_755_p00(10 - 1 downto 0);
    grp_fu_755_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_bound_per_npc_dout),19));
    grp_fu_755_p1 <= grp_fu_755_p10(9 - 1 downto 0);
    grp_fu_755_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_load_cast_cast_cast_cast_fu_180_p1),19));
    i_1_fu_229_p2 <= std_logic_vector(unsigned(i_reg_146) + unsigned(ap_const_lv19_1));
    icmp_ln1073_fu_235_p2 <= "1" when (i_reg_146 = mul_ln1073_reg_819) else "0";
    icmp_ln1084_fu_275_p2 <= "1" when (signed(rem_fu_96) < signed(zext_ln1079_fu_256_p1)) else "0";
    icmp_ln1085_fu_323_p2 <= "1" when (rem_fu_96 = ap_const_lv32_0) else "0";
    icmp_ln1104_fu_408_p2 <= "1" when (signed(j_reg_135) < signed(cols_bound_per_npc_cast3_i_reg_799)) else "0";
    icmp_ln414_fu_383_p2 <= "1" when (unsigned(rem_fu_96) > unsigned(sext_ln1090_fu_359_p1)) else "0";
    icmp_ln674_1_fu_298_p2 <= "1" when (unsigned(grp_fu_166_p2) > unsigned(sub_ln1093_fu_292_p2)) else "0";
    icmp_ln674_fu_343_p2 <= "0" when (tmp_fu_333_p4 = ap_const_lv29_0) else "1";

    imgInput_44_blk_n_assign_proc : process(imgInput_44_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1104_reg_914)
    begin
        if (((icmp_ln1104_reg_914 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput_44_blk_n <= imgInput_44_full_n;
        else 
            imgInput_44_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgInput_44_din <= (select_ln1078_fu_741_p3 and ap_phi_mux_localbuffer_V_5_phi_fu_160_p4);

    imgInput_44_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1104_reg_914, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1104_reg_914 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput_44_write <= ap_const_logic_1;
        else 
            imgInput_44_write <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_419_p3 <= 
        ap_const_lv32_0 when (bLast_fu_244_p2(0) = '1') else 
        add_ln1105_fu_413_p2;

    last_blk_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, last_blk_width_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_blk_n <= last_blk_width_empty_n;
        else 
            last_blk_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    last_blk_width_cast3_i_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(last_blk_width_read_reg_782),5));

    last_blk_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_read <= ap_const_logic_1;
        else 
            last_blk_width_read <= ap_const_logic_0;
        end if; 
    end process;


    ldata1_blk_n_assign_proc : process(ldata1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1073_reg_829, icmp_ln1084_reg_838)
    begin
        if (((icmp_ln1084_reg_838 = ap_const_lv1_1) and (icmp_ln1073_reg_829 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ldata1_blk_n <= ldata1_empty_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op118_read_state6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op118_read_state6 = ap_const_boolean_1))) then 
            ldata1_read <= ap_const_logic_1;
        else 
            ldata1_read <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_V_fu_594_p3 <= 
        ap_const_lv8_0 when (icmp_ln1085_reg_863(0) = '1') else 
        p_Result_1_fu_588_p2;
    lshr_ln414_1_fu_684_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_3_fu_651_p1(8-1 downto 0)))));
    lshr_ln414_fu_582_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_fu_578_p1(8-1 downto 0)))));
    lshr_ln674_1_fu_561_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln674_1_fu_551_p1(8-1 downto 0)))));
    lshr_ln674_2_fu_604_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln674_2_fu_601_p1(8-1 downto 0)))));
    lshr_ln674_3_fu_487_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_4_fu_460_p3),to_integer(unsigned('0' & zext_ln674_3_fu_479_p1(8-1 downto 0)))));
    lshr_ln674_4_fu_493_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln674_4_fu_483_p1(8-1 downto 0)))));
    lshr_ln674_5_fu_735_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln674_5_fu_731_p1(8-1 downto 0)))));
    lshr_ln674_fu_555_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_1_fu_528_p3),to_integer(unsigned('0' & zext_ln674_fu_547_p1(8-1 downto 0)))));
    p_Result_1_fu_588_p2 <= (p_Result_s_fu_567_p2 and lshr_ln414_fu_582_p2);
    p_Result_2_fu_610_p2 <= (lshr_ln674_2_fu_604_p2 and ldata1_dout);
    p_Result_3_fu_714_p2 <= (and_ln414_2_fu_708_p2 or and_ln414_1_fu_702_p2);
    p_Result_4_fu_499_p2 <= (lshr_ln674_4_fu_493_p2 and lshr_ln674_3_fu_487_p2);
    p_Result_s_fu_567_p2 <= (lshr_ln674_fu_555_p2 and lshr_ln674_1_fu_561_p2);
    ptr_width_minus_fu_264_p3 <= 
        sub4_i_reg_809 when (bLast_fu_244_p2(0) = '1') else 
        ap_const_lv5_0;
    rem_1_fu_397_p2 <= std_logic_vector(unsigned(rem_fu_96) + unsigned(sext_ln1080_fu_271_p1));
    rem_2_fu_312_p2 <= std_logic_vector(unsigned(rem_fu_96) - unsigned(zext_ln1079_fu_256_p1));

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        rows_load_cast_cast_cast_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rows_dout),9));


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1078_fu_741_p3 <= 
        lshr_ln674_5_fu_735_p2 when (bLast_reg_833(0) = '1') else 
        ap_const_lv8_FF;
    select_ln1093_fu_281_p3 <= 
        add_ln1093_reg_814 when (bLast_fu_244_p2(0) = '1') else 
        ap_const_lv5_F;
    select_ln414_1_fu_626_p3 <= 
        trunc_ln414_1_reg_908 when (icmp_ln414_reg_892(0) = '1') else 
        trunc_ln414_reg_900;
    select_ln414_2_fu_631_p3 <= 
        sub_ln414_1_fu_616_p2 when (icmp_ln414_reg_892(0) = '1') else 
        trunc_ln414_reg_900;
    select_ln414_3_fu_671_p3 <= 
        tmp_3_fu_661_p4 when (icmp_ln414_reg_892(0) = '1') else 
        shl_ln414_fu_655_p2;
    select_ln414_fu_621_p3 <= 
        trunc_ln414_reg_900 when (icmp_ln414_reg_892(0) = '1') else 
        trunc_ln414_1_reg_908;
    select_ln674_1_fu_528_p3 <= 
        tmp_1_fu_506_p4 when (icmp_ln674_reg_873(0) = '1') else 
        p_Val2_s_fu_100;
    select_ln674_2_fu_535_p3 <= 
        grp_fu_171_p2 when (icmp_ln674_reg_873(0) = '1') else 
        trunc_ln674_reg_880;
    select_ln674_3_fu_453_p3 <= 
        sub_ln674_4_fu_440_p2 when (icmp_ln674_1_reg_842(0) = '1') else 
        sub_ln674_6_fu_449_p2;
    select_ln674_4_fu_460_p3 <= 
        tmp_4_fu_430_p4 when (icmp_ln674_1_reg_842(0) = '1') else 
        p_Val2_s_fu_100;
    select_ln674_5_fu_467_p3 <= 
        sub_ln674_5_fu_444_p2 when (icmp_ln674_1_reg_842(0) = '1') else 
        trunc_ln674_1_reg_849;
    select_ln674_fu_521_p3 <= 
        add_ln674_fu_516_p2 when (icmp_ln674_reg_873(0) = '1') else 
        grp_fu_171_p2;
        sext_ln1080_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ptr_width_minus_fu_264_p3),32));

        sext_ln1090_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1090_fu_353_p2),32));

    shl_ln414_1_fu_678_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_2_fu_647_p1(8-1 downto 0)))));
    shl_ln414_fu_655_p2 <= std_logic_vector(shift_left(unsigned(p_Result_2_fu_610_p2),to_integer(unsigned('0' & zext_ln414_1_fu_643_p1(8-1 downto 0)))));
    sub4_i_fu_217_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) - unsigned(last_blk_width_cast3_i_fu_201_p1));
        sub_cast_i_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_i_fu_207_p2),32));

    sub_i_fu_207_p2 <= std_logic_vector(unsigned(cols_bound_per_npc_cast2_i_fu_204_p1) + unsigned(ap_const_lv11_7FF));
    sub_ln1093_fu_292_p2 <= std_logic_vector(unsigned(zext_ln1093_fu_288_p1) - unsigned(rem_fu_96));
    sub_ln414_1_fu_616_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln414_reg_900));
    sub_ln414_2_fu_637_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(select_ln414_fu_621_p3));
    sub_ln414_fu_573_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(trunc_ln1086_reg_868));
    sub_ln674_2_fu_541_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(select_ln674_fu_521_p3));
    sub_ln674_3_fu_371_p2 <= std_logic_vector(unsigned(trunc_ln1090_1_fu_367_p1) - unsigned(trunc_ln1090_fu_363_p1));
    sub_ln674_4_fu_440_p2 <= std_logic_vector(unsigned(trunc_ln674_1_reg_849) - unsigned(trunc_ln674_2_reg_857));
    sub_ln674_5_fu_444_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln674_1_reg_849));
    sub_ln674_6_fu_449_p2 <= std_logic_vector(unsigned(trunc_ln674_2_reg_857) - unsigned(trunc_ln674_1_reg_849));
    sub_ln674_7_fu_473_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(select_ln674_3_fu_453_p3));
    sub_ln674_8_fu_726_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(last_blk_width_read_reg_782));
    
    tmp_1_fu_506_p4_proc : process(p_Val2_s_fu_100)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_1_fu_506_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_100;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_1_fu_506_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_1_fu_506_p4_i) := p_Val2_s_fu_100(8-1-tmp_1_fu_506_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_506_p4 <= resvalue(8-1 downto 0);
    end process;

    
    tmp_3_fu_661_p4_proc : process(shl_ln414_fu_655_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_3_fu_661_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := shl_ln414_fu_655_p2;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_3_fu_661_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_3_fu_661_p4_i) := shl_ln414_fu_655_p2(8-1-tmp_3_fu_661_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_661_p4 <= resvalue(8-1 downto 0);
    end process;

    
    tmp_4_fu_430_p4_proc : process(p_Val2_s_fu_100)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_4_fu_430_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_100;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_4_fu_430_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_4_fu_430_p4_i) := p_Val2_s_fu_100(8-1-tmp_4_fu_430_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_4_fu_430_p4 <= resvalue(8-1 downto 0);
    end process;

    tmp_fu_333_p4 <= grp_fu_166_p2(31 downto 3);
    trunc_ln1086_fu_329_p1 <= rem_fu_96(4 - 1 downto 0);
    trunc_ln1090_1_fu_367_p1 <= rem_fu_96(4 - 1 downto 0);
    trunc_ln1090_fu_363_p1 <= add_ln1090_fu_353_p2(4 - 1 downto 0);
    trunc_ln414_1_fu_393_p1 <= add_ln1090_fu_353_p2(4 - 1 downto 0);
    trunc_ln414_fu_389_p1 <= rem_fu_96(4 - 1 downto 0);
    trunc_ln674_1_fu_304_p1 <= grp_fu_166_p2(4 - 1 downto 0);
    trunc_ln674_2_fu_308_p1 <= sub_ln1093_fu_292_p2(4 - 1 downto 0);
    trunc_ln674_fu_349_p1 <= grp_fu_166_p2(4 - 1 downto 0);
    xf_bits_per_clock_fu_249_p3 <= 
        last_blk_width_read_reg_782 when (bLast_fu_244_p2(0) = '1') else 
        ap_const_lv4_8;
    xor_ln414_fu_696_p2 <= (ap_const_lv8_FF xor and_ln414_fu_690_p2);
    zext_ln1079_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_249_p3),5));
    zext_ln1079_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_249_p3),32));
    zext_ln1093_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1093_fu_281_p3),32));
    zext_ln414_1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_631_p3),8));
    zext_ln414_2_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_626_p3),8));
    zext_ln414_3_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_2_fu_637_p2),8));
    zext_ln414_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_fu_573_p2),8));
    zext_ln674_1_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_2_fu_541_p2),8));
    zext_ln674_2_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln674_1_reg_887),8));
    zext_ln674_3_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_5_fu_467_p3),8));
    zext_ln674_4_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_7_fu_473_p2),8));
    zext_ln674_5_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_8_fu_726_p2),8));
    zext_ln674_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_2_fu_535_p3),8));
end behav;
