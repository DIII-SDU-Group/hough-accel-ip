-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity houghlines_accel_Array2xfMat_8_0_480_640_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    img_in_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    img_in_ce0 : OUT STD_LOGIC;
    img_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    imgInput_44_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgInput_44_full_n : IN STD_LOGIC;
    imgInput_44_write : OUT STD_LOGIC;
    dstMat_rows_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    dstMat_rows_empty_n : IN STD_LOGIC;
    dstMat_rows_read : OUT STD_LOGIC;
    dstMat_cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    dstMat_cols_empty_n : IN STD_LOGIC;
    dstMat_cols_read : OUT STD_LOGIC;
    dstMat_rows_out_din : OUT STD_LOGIC_VECTOR (5 downto 0);
    dstMat_rows_out_full_n : IN STD_LOGIC;
    dstMat_rows_out_write : OUT STD_LOGIC;
    dstMat_cols_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    dstMat_cols_out_full_n : IN STD_LOGIC;
    dstMat_cols_out_write : OUT STD_LOGIC );
end;


architecture behav of houghlines_accel_Array2xfMat_8_0_480_640_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal dstMat_rows_blk_n : STD_LOGIC;
    signal dstMat_cols_blk_n : STD_LOGIC;
    signal dstMat_rows_out_blk_n : STD_LOGIC;
    signal dstMat_cols_out_blk_n : STD_LOGIC;
    signal dstMat_rows_read_reg_92 : STD_LOGIC_VECTOR (5 downto 0);
    signal dstMat_cols_read_reg_97 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Axi2Mat_fu_80_img_in_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_Axi2Mat_fu_80_img_in_ce0 : STD_LOGIC;
    signal grp_Axi2Mat_fu_80_img_in_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Axi2Mat_fu_80_img_in_we0 : STD_LOGIC;
    signal grp_Axi2Mat_fu_80_imgInput_44_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Axi2Mat_fu_80_imgInput_44_write : STD_LOGIC;
    signal grp_Axi2Mat_fu_80_ap_start : STD_LOGIC;
    signal grp_Axi2Mat_fu_80_ap_done : STD_LOGIC;
    signal grp_Axi2Mat_fu_80_ap_ready : STD_LOGIC;
    signal grp_Axi2Mat_fu_80_ap_idle : STD_LOGIC;
    signal grp_Axi2Mat_fu_80_ap_continue : STD_LOGIC;
    signal grp_Axi2Mat_fu_80_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call13 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_Axi2Mat_fu_80_ap_ready : STD_LOGIC;
    signal ap_sync_grp_Axi2Mat_fu_80_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_Axi2Mat_fu_80_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_Axi2Mat_fu_80_ap_done : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component houghlines_accel_Axi2Mat IS
    port (
        img_in_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        img_in_ce0 : OUT STD_LOGIC;
        img_in_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        img_in_we0 : OUT STD_LOGIC;
        imgInput_44_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgInput_44_full_n : IN STD_LOGIC;
        imgInput_44_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (5 downto 0);
        cols : IN STD_LOGIC_VECTOR (9 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        rows_ap_vld : IN STD_LOGIC;
        cols_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_Axi2Mat_fu_80 : component houghlines_accel_Axi2Mat
    port map (
        img_in_address0 => grp_Axi2Mat_fu_80_img_in_address0,
        img_in_ce0 => grp_Axi2Mat_fu_80_img_in_ce0,
        img_in_d0 => grp_Axi2Mat_fu_80_img_in_d0,
        img_in_q0 => img_in_q0,
        img_in_we0 => grp_Axi2Mat_fu_80_img_in_we0,
        imgInput_44_din => grp_Axi2Mat_fu_80_imgInput_44_din,
        imgInput_44_full_n => imgInput_44_full_n,
        imgInput_44_write => grp_Axi2Mat_fu_80_imgInput_44_write,
        rows => dstMat_rows_read_reg_92,
        cols => dstMat_cols_read_reg_97,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        rows_ap_vld => ap_const_logic_1,
        cols_ap_vld => ap_const_logic_1,
        ap_start => grp_Axi2Mat_fu_80_ap_start,
        ap_done => grp_Axi2Mat_fu_80_ap_done,
        ap_ready => grp_Axi2Mat_fu_80_ap_ready,
        ap_idle => grp_Axi2Mat_fu_80_ap_idle,
        ap_continue => grp_Axi2Mat_fu_80_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_Axi2Mat_fu_80_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_Axi2Mat_fu_80_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_Axi2Mat_fu_80_ap_done <= ap_const_logic_0;
                elsif ((grp_Axi2Mat_fu_80_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_Axi2Mat_fu_80_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_Axi2Mat_fu_80_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_Axi2Mat_fu_80_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_Axi2Mat_fu_80_ap_ready <= ap_const_logic_0;
                elsif ((grp_Axi2Mat_fu_80_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_Axi2Mat_fu_80_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Axi2Mat_fu_80_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Axi2Mat_fu_80_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sync_grp_Axi2Mat_fu_80_ap_ready = ap_const_logic_0)) or (not(((real_start = ap_const_logic_0) or (dstMat_cols_out_full_n = ap_const_logic_0) or (dstMat_rows_out_full_n = ap_const_logic_0) or (dstMat_cols_empty_n = ap_const_logic_0) or (dstMat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_Axi2Mat_fu_80_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Axi2Mat_fu_80_ap_ready = ap_const_logic_1)) then 
                    grp_Axi2Mat_fu_80_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                dstMat_cols_read_reg_97 <= dstMat_cols_dout;
                dstMat_rows_read_reg_92 <= dstMat_rows_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, dstMat_rows_empty_n, dstMat_cols_empty_n, dstMat_rows_out_full_n, dstMat_cols_out_full_n, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (dstMat_cols_out_full_n = ap_const_logic_0) or (dstMat_rows_out_full_n = ap_const_logic_0) or (dstMat_cols_empty_n = ap_const_logic_0) or (dstMat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, dstMat_rows_empty_n, dstMat_cols_empty_n, dstMat_rows_out_full_n, dstMat_cols_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (dstMat_cols_out_full_n = ap_const_logic_0) or (dstMat_rows_out_full_n = ap_const_logic_0) or (dstMat_cols_empty_n = ap_const_logic_0) or (dstMat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call13_assign_proc : process(real_start, ap_done_reg, dstMat_rows_empty_n, dstMat_cols_empty_n, dstMat_rows_out_full_n, dstMat_cols_out_full_n)
    begin
                ap_block_state1_ignore_call13 <= ((real_start = ap_const_logic_0) or (dstMat_cols_out_full_n = ap_const_logic_0) or (dstMat_rows_out_full_n = ap_const_logic_0) or (dstMat_cols_empty_n = ap_const_logic_0) or (dstMat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_Axi2Mat_fu_80_ap_ready, ap_sync_grp_Axi2Mat_fu_80_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_Axi2Mat_fu_80_ap_ready and ap_sync_grp_Axi2Mat_fu_80_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    ap_sync_grp_Axi2Mat_fu_80_ap_done <= (grp_Axi2Mat_fu_80_ap_done or ap_sync_reg_grp_Axi2Mat_fu_80_ap_done);
    ap_sync_grp_Axi2Mat_fu_80_ap_ready <= (grp_Axi2Mat_fu_80_ap_ready or ap_sync_reg_grp_Axi2Mat_fu_80_ap_ready);

    dstMat_cols_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dstMat_cols_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstMat_cols_blk_n <= dstMat_cols_empty_n;
        else 
            dstMat_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dstMat_cols_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dstMat_cols_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstMat_cols_out_blk_n <= dstMat_cols_out_full_n;
        else 
            dstMat_cols_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dstMat_cols_out_din <= dstMat_cols_dout;

    dstMat_cols_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dstMat_rows_empty_n, dstMat_cols_empty_n, dstMat_rows_out_full_n, dstMat_cols_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (dstMat_cols_out_full_n = ap_const_logic_0) or (dstMat_rows_out_full_n = ap_const_logic_0) or (dstMat_cols_empty_n = ap_const_logic_0) or (dstMat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstMat_cols_out_write <= ap_const_logic_1;
        else 
            dstMat_cols_out_write <= ap_const_logic_0;
        end if; 
    end process;


    dstMat_cols_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dstMat_rows_empty_n, dstMat_cols_empty_n, dstMat_rows_out_full_n, dstMat_cols_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (dstMat_cols_out_full_n = ap_const_logic_0) or (dstMat_rows_out_full_n = ap_const_logic_0) or (dstMat_cols_empty_n = ap_const_logic_0) or (dstMat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstMat_cols_read <= ap_const_logic_1;
        else 
            dstMat_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    dstMat_rows_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dstMat_rows_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstMat_rows_blk_n <= dstMat_rows_empty_n;
        else 
            dstMat_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dstMat_rows_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dstMat_rows_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstMat_rows_out_blk_n <= dstMat_rows_out_full_n;
        else 
            dstMat_rows_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dstMat_rows_out_din <= dstMat_rows_dout;

    dstMat_rows_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dstMat_rows_empty_n, dstMat_cols_empty_n, dstMat_rows_out_full_n, dstMat_cols_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (dstMat_cols_out_full_n = ap_const_logic_0) or (dstMat_rows_out_full_n = ap_const_logic_0) or (dstMat_cols_empty_n = ap_const_logic_0) or (dstMat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstMat_rows_out_write <= ap_const_logic_1;
        else 
            dstMat_rows_out_write <= ap_const_logic_0;
        end if; 
    end process;


    dstMat_rows_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, dstMat_rows_empty_n, dstMat_cols_empty_n, dstMat_rows_out_full_n, dstMat_cols_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (dstMat_cols_out_full_n = ap_const_logic_0) or (dstMat_rows_out_full_n = ap_const_logic_0) or (dstMat_cols_empty_n = ap_const_logic_0) or (dstMat_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dstMat_rows_read <= ap_const_logic_1;
        else 
            dstMat_rows_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_Axi2Mat_fu_80_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            grp_Axi2Mat_fu_80_ap_continue <= ap_const_logic_1;
        else 
            grp_Axi2Mat_fu_80_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_Axi2Mat_fu_80_ap_start <= grp_Axi2Mat_fu_80_ap_start_reg;
    imgInput_44_din <= grp_Axi2Mat_fu_80_imgInput_44_din;

    imgInput_44_write_assign_proc : process(grp_Axi2Mat_fu_80_imgInput_44_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            imgInput_44_write <= grp_Axi2Mat_fu_80_imgInput_44_write;
        else 
            imgInput_44_write <= ap_const_logic_0;
        end if; 
    end process;

    img_in_address0 <= grp_Axi2Mat_fu_80_img_in_address0;
    img_in_ce0 <= grp_Axi2Mat_fu_80_img_in_ce0;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
